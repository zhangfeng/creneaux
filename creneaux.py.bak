import sqlite3
from flask import Flask, session, render_template, g, Response, request, url_for, redirect
from hashlib import sha1

DATABASE = '/home/emmanuel/creneaux/creneaux.db'
SECRET_KEY = "043ecbddfef85390d149352d9ccd430bd7caa7fc Site Devisport Web"

app = Flask('creneaux')

app.config.from_object(__name__)
# app.config['APPLICATION_ROOT'] = '/agenda'


def connect_db():
	db = sqlite3.connect(app.config['DATABASE'])
	db.row_factory = sqlite3.Row
	return db

def check_auth(user, passwd):
	sh_pass = sha1(passwd).hexdigest()
	cur = g.db.execute('select * from users where name=? and passwd=?', [user, sh_pass])
	return cur.fetchone() is not None

def is_admin():
	if 'username' not in session: return False
	cur = g.db.execute('select * from users where name=? and role=0', [session['username']])
	return cur.fetchone() is not None

def authenticate():
	return Response('Connexion requise, veuillez entrer vos identifiants', 401,
		{'WWW-Authenticate': 'Basic realm="Creneaux"'})

def requires_auth(f):
	@wraps(f)
	def decorated(*args, **kwargs):
		auth = request.authorization
		if not auth or not check_auth(auth.username, auth.password):
			return authenticate()
		return f(*args, **kwargs)
	return decorated

@app.before_request
def before_request():
	g.db = connect_db()

@app.teardown_request
def teardown_request(exception):
	db = getattr(g, 'db', None)
	if db is not None:
		db.close()

@app.route("/")
def index():
	sessions = g.db.execute("select date, org, presents from sessions where date > DATE() order by date");
	users = {x['id']:x['name'] for x in g.db.execute('select id, name from users')}
	creneaux = []
	for s in sessions:
		d = s['date'].split('-');
		org = 'Personne'
		if s['org']:
			org = users[s['org']]
		entry = {
			'date': '{0}/{1}/{2}'.format(d[2], d[1], d[0]),
			'org':  org,
			'presents': s['presents'].replace(",", ", ") or "Personne"
		};
		creneaux.append(entry);
	return render_template('index.html', creneaux=creneaux)

@app.route("/sessions/list")
def sessionsList():
	sessions = g.db.execute("select id, date, org, presents from sessions where date > DATE() order by date");
	users = {x['id']:x['name'] for x in g.db.execute('select id, name from users')}
	creneaux = []
	for s in sessions:
		d = s['date'].split('-');
		org = 'Personne'
		if s['org']:
			org = users[s['org']]
		entry = {
			'id': s['id'],
			'date': '{0}/{1}/{2}'.format(d[2], d[1], d[0]),
			'org': org,
			'presents': s['presents'].replace(",", ", ") or "Personne"
		};
		creneaux.append(entry);
	if 'username' in session:
		return render_template('sessions.html', creneaux=creneaux, user=session['username'], admin=is_admin())
	else:
		return redirect(url_for('index'))

@app.route("/sessions/organize/<sid>")
def sessionsOrganize(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	users = {x['name']:x for x in g.db.execute('select * from users')}
	s = g.db.execute("select org, presents from sessions where id=? and org IS NULL", [sid]).fetchone()
	if s is not None:
		if s['presents'].find(session['username']) >= 0:
			g.db.execute("UPDATE sessions SET org=? WHERE id=?",
				[users[session['username']]['id'], sid])
		else:
			presents = s['presents'].split(",")
			presents.append(session['username'])
			presents.sort()
			presents = ",".join(presents)
			g.db.execute("UPDATE sessions SET org=?, presents=? WHERE id=?",
				[users[session['username']]['id'], presents, sid])
		g.db.commit()
	return redirect(url_for('sessionsList'))

@app.route("/sessions/absent/<sid>")
def sessionsAbsent(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	users = {x['name']:x for x in g.db.execute('select * from users')}
	s = g.db.execute("select org, presents from sessions where id=?", [sid]).fetchone()
	if s is not None:
		presents = s['presents'].split(",")
		if session['username'] in presents:
			presents.remove(session['username'])
			presents.sort()
			presents = ",".join(presents)
			g.db.execute("UPDATE sessions SET presents=? WHERE id=?",
				[presents, sid])
			if s['org'] == users[session['username']]['id']:
				g.db.execute("UPDATE sessions SET org=NULL WHERE id=?", [sid])
			g.db.commit()
	return redirect(url_for('sessionsList'))

@app.route("/sessions/present/<sid>")
def sessionsPresent(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	users = {x['name']:x for x in g.db.execute('select * from users')}
	s = g.db.execute("select org, presents from sessions where id=?", [sid]).fetchone()
	if s is not None:
		if s['presents']:
			presents = s['presents'].split(",")
		else:
			presents = []
		if session['username'] not in presents:
			presents.append(session['username'])
			presents.sort()
			presents = ",".join(presents)
			g.db.execute("UPDATE sessions SET presents=? WHERE id=?",
				[presents, sid])
			g.db.commit()
	return redirect(url_for('sessionsList'))

@app.route("/sessions/presences/<sid>", methods=['GET','POST'])
def sessionsPresences(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	if not is_admin():
		return redirect(url_for('sessionsList'))
	users = {x['name']:x for x in g.db.execute('select * from users where id > 0')}
	if request.method == 'POST' and hasattr(request, 'form'):
		presences = ','.join(request.form.getlist('presences'))
		g.db.execute("UPDATE sessions SET presents=? WHERE id=?", [presences, sid])
		g.db.commit()
	s = g.db.execute("select * from sessions where id=?", [sid]).fetchone()
	presents = ""
	if s is not None:
		if s['presents']:
			presents = s['presents'].split(",")
		else:
			presents = []
#		presents = ",".join(presents)
	return render_template('presences.html', seance=s, presents=presents, users=users, admin=is_admin())

@app.route("/sessions/annule/<sid>")
def sessionsAnnule(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	s = g.db.execute("select org, presents from sessions where id=?", [sid]).fetchone()
	if s is not None and is_admin():
		g.db.execute("UPDATE sessions SET org=NULL, presents='' WHERE id=?", [sid])
		g.db.commit()
	return redirect(url_for('sessionsList'))

@app.route("/sessions/supprime/<sid>")
def sessionsSupprime(sid):
	if 'username' not in session:
		return redirect(url_for('index'))
	if not is_admin():
		return redirect(url_for('sessionsList'))
	g.db.execute("DELETE FROM sessions WHERE id=?", [sid])
	g.db.commit()
	return redirect(url_for('sessionsList'))

@app.route("/login", methods=['POST'])
def login():
	if hasattr(request, "form") and check_auth(request.form['username'], request.form['passwd']):
		session['username'] = request.form['username']
	return redirect(url_for('sessionsList'))

@app.route("/logout")
def logout():
	if 'username' in session:
		del session['username']
	return redirect(url_for('index'))

@app.route("/users/list")
def usersList():
	if 'username' not in session:
		return redirect(url_for('index'))
	if not is_admin():
		return redirect(url_for('index'))
	users = {x['id']:x for x in g.db.execute('select * from users')}
	roles = {x['id']:x['name'] for x in g.db.execute('select id, name from roles')}
	return render_template("users.html", users=users, roles=roles, admin=is_admin())

@app.route("/users/add", methods=['POST'])
def usersAdd():
	if 'username' not in session:
		return redirect(url_for('index'))
	if not is_admin():
		return redirect(url_for('index'))
	if hasattr(request, "form") and len(request.form['username']) > 0 and len(request.form['userpasswd']) > 0:
		sh_pass = sha1(request.form['userpasswd']).hexdigest()
		if 'useremail' in request.form and len(request.form['useremail']) > 0:
			g.db.execute("INSERT INTO users (name, email, passwd, role) VALUES (?, ?, ?, ?)", [
				request.form['username'], 
				request.form['useremail'],
				sh_pass,
				request.form['role']])
		else:
			g.db.execute("INSERT INTO users (name, passwd, role) VALUES (?, ?, ?)", [
				request.form['username'], 
				sh_pass,
				request.form['role'] ])
		g.db.execute('update sessions set presents=presents||","||? where date > DATE() AND presents IS NOT NULL', [request.form['username']])
		g.db.execute("update sessions set presents=? where date > DATE() AND presents IS NULL", [request.form['username']])
		g.db.commit()
	return redirect(url_for('usersList'))

@app.route("/users/modify", methods=['POST'])
def usersModify():
	if 'username' not in session:
		return redirect(url_for('index'))
	if hasattr(request, "form") and ('id' in request.form) and len(request.form['id']) > 0:
		userID = request.form['id']
		userEntry = g.db.execute('select name, email, passwd, role from users where id=?', [userID]).fetchone()
		if not is_admin() and userEntry['name'] != session['username']:
			return redirect(url_for('sessionsList'))
		userRecord = { x:userEntry[x] for x in ('email', 'passwd', 'role') }
		if 'userpassword' in request.form and len(request.form['userpassword']) > 0:
			sh_pass = sha1(request.form['userpassword']).hexdigest()
			userRecord['passwd'] = sh_pass
		if 'useremail' in request.form and len(request.form['useremail']) > 0:
			userRecord['email'] = request.form['useremail']
		if userRecord['role'] != request.form['role']:
			userRecord['role'] = request.form['role']
		g.db.execute("UPDATE users SET email=?,passwd=?,role=? WHERE id=?", [
			userRecord['email'], userRecord['passwd'], userRecord['role'], userID
		])
		g.db.commit()
	if is_admin():
		return redirect(url_for('usersList'))
	else:
		return redirect(url_for('compte'))

@app.route("/compte")
def compte():
	if 'username' not in session:
		return redirect(url_for('index'))
	user = g.db.execute('select * from users where name=?', [session['username']]).fetchone()
	if user is None:
		return redirect(url_for('index'))
	roles = {x['id']:x['name'] for x in g.db.execute('select id, name from roles')}
	return render_template("compte.html", u=user, admin=is_admin())

if __name__ == '__main__':
	app.run(debug=True)
